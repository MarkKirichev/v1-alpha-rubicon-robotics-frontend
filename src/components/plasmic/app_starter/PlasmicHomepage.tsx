// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dKk8Knqcofc5g1t8VsAPKu
// Component: PwT-qkZMie

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton"; // plasmic-import: bx9Xzvf5_eu/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: dKk8Knqcofc5g1t8VsAPKu/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: PwT-qkZMie/css

import Ellipse2Icon from "./icons/PlasmicIcon__Ellipse2"; // plasmic-import: -r06K1zZik/icon
import Ellipse1Icon from "./icons/PlasmicIcon__Ellipse1"; // plasmic-import: fD9034JJaG/icon
import Ellipse3Icon from "./icons/PlasmicIcon__Ellipse3"; // plasmic-import: NYJVKnXk-3/icon
import Ellipse4Icon from "./icons/PlasmicIcon__Ellipse4"; // plasmic-import: BletLy9po0/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: HEiQBG97te/icon
import Ellipse5Icon from "./icons/PlasmicIcon__Ellipse5"; // plasmic-import: 03VlUjRljf/icon
import Ellipse6Icon from "./icons/PlasmicIcon__Ellipse6"; // plasmic-import: qsrLpP8Ch/icon
import Arrow1Icon from "./icons/PlasmicIcon__Arrow1"; // plasmic-import: aSB-QTG0lS/icon
import Line1Icon from "./icons/PlasmicIcon__Line1"; // plasmic-import: xOCaGHF72I/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  desktopDefault?: p.Flex<"div">;
  landing1?: p.Flex<"div">;
  frame1?: p.Flex<"div">;
  logoTransparentWhite1?: p.Flex<"div">;
  button?: p.Flex<typeof AntdButton>;
  button2?: p.Flex<typeof AntdButton>;
  button3?: p.Flex<typeof AntdButton>;
  landing2?: p.Flex<"div">;
  carousel?: p.Flex<"div">;
  leftArrow?: p.Flex<"div">;
  rightArrow?: p.Flex<"div">;
  frame10?: p.Flex<"div">;
  rectangle1?: p.Flex<"div">;
  maskGroup?: p.Flex<"div">;
  rectangle2?: p.Flex<"div">;
  button1?: p.Flex<"div">;
  button4?: p.Flex<typeof AntdButton>;
  frame13?: p.Flex<"div">;
  rectangle3?: p.Flex<"div">;
  maskGroup2?: p.Flex<"div">;
  rectangle4?: p.Flex<"div">;
  button22?: p.Flex<"div">;
  button5?: p.Flex<typeof AntdButton>;
  frame12?: p.Flex<"div">;
  rectangle5?: p.Flex<"div">;
  maskGroup3?: p.Flex<"div">;
  rectangle6?: p.Flex<"div">;
  button23?: p.Flex<"div">;
  button6?: p.Flex<typeof AntdButton>;
  frame11?: p.Flex<"div">;
  rectangle7?: p.Flex<"div">;
  maskGroup4?: p.Flex<"div">;
  rectangle8?: p.Flex<"div">;
  button24?: p.Flex<"div">;
  button7?: p.Flex<typeof AntdButton>;
  rectangle9?: p.Flex<"div">;
  swingbot?: p.Flex<"div">;
  sprintbot?: p.Flex<"div">;
  signbot?: p.Flex<"div">;
  swimbot?: p.Flex<"div">;
  frame14?: p.Flex<"div">;
  coach?: p.Flex<"div">;
  athlete?: p.Flex<"div">;
  other?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"desktopDefault"}
            data-plasmic-override={overrides.desktopDefault}
            className={classNames(projectcss.all, sty.desktopDefault)}
          >
            <div
              data-plasmic-name={"landing1"}
              data-plasmic-override={overrides.landing1}
              className={classNames(projectcss.all, sty.landing1)}
            >
              <Ellipse2Icon
                className={classNames(projectcss.all, sty.svg__r65Po)}
                role={"img"}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame1"}
                data-plasmic-override={overrides.frame1}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame1)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zTeBv
                  )}
                >
                  {"Rubicon  Robotics"}
                </div>
              </p.Stack>
              <div
                data-plasmic-name={"logoTransparentWhite1"}
                data-plasmic-override={overrides.logoTransparentWhite1}
                className={classNames(
                  projectcss.all,
                  sty.logoTransparentWhite1
                )}
              />

              <AntdButton
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                icon={
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      sty.span__zAaw9
                    )}
                  >
                    {"None"}
                  </span>
                }
                size={"Medium" as const}
                type={"Solid" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vnvjV
                  )}
                >
                  {"Button"}
                </div>
              </AntdButton>
              <AntdButton
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames("__wab_instance", sty.button2)}
                icon={
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      sty.span__x8Yl2
                    )}
                  >
                    {"None"}
                  </span>
                }
                size={"Medium" as const}
                type={"Outlined" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__atxR2
                  )}
                >
                  {"Button"}
                </div>
              </AntdButton>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bqGif
                )}
              >
                {
                  "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
                }
              </div>
              <AntdButton
                data-plasmic-name={"button3"}
                data-plasmic-override={overrides.button3}
                className={classNames("__wab_instance", sty.button3)}
                icon={
                  <span
                    className={classNames(
                      projectcss.all,
                      projectcss.span,
                      projectcss.__wab_text,
                      sty.span__fzEbY
                    )}
                  >
                    {"Right"}
                  </span>
                }
                size={"Large" as const}
                type={"Solid" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sqEwg
                  )}
                >
                  {"Button"}
                </div>
              </AntdButton>
            </div>
            <Ellipse1Icon
              className={classNames(projectcss.all, sty.svg__pi1Nh)}
              role={"img"}
            />

            <Ellipse3Icon
              className={classNames(projectcss.all, sty.svg__dQutq)}
              role={"img"}
            />

            <Ellipse4Icon
              className={classNames(projectcss.all, sty.svg__inkZ9)}
              role={"img"}
            />

            <div
              data-plasmic-name={"landing2"}
              data-plasmic-override={overrides.landing2}
              className={classNames(projectcss.all, sty.landing2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jAuBh
                )}
              >
                {"Products"}
              </div>
              <div
                data-plasmic-name={"carousel"}
                data-plasmic-override={overrides.carousel}
                className={classNames(projectcss.all, sty.carousel)}
              >
                <div
                  data-plasmic-name={"leftArrow"}
                  data-plasmic-override={overrides.leftArrow}
                  className={classNames(projectcss.all, sty.leftArrow)}
                >
                  <GroupIcon
                    className={classNames(projectcss.all, sty.svg__k65Ar)}
                    role={"img"}
                  />
                </div>
                <div
                  data-plasmic-name={"rightArrow"}
                  data-plasmic-override={overrides.rightArrow}
                  className={classNames(projectcss.all, sty.rightArrow)}
                >
                  <GroupIcon
                    className={classNames(projectcss.all, sty.svg__cpL72)}
                    role={"img"}
                  />
                </div>
                <Ellipse5Icon
                  className={classNames(projectcss.all, sty.svg__zzuy1)}
                  role={"img"}
                />

                <Ellipse5Icon
                  className={classNames(projectcss.all, sty.svg__bYoyS)}
                  role={"img"}
                />

                <Ellipse5Icon
                  className={classNames(projectcss.all, sty.svg__jmoam)}
                  role={"img"}
                />

                <Ellipse5Icon
                  className={classNames(projectcss.all, sty.svg___4Lkj)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"frame10"}
                  data-plasmic-override={overrides.frame10}
                  className={classNames(projectcss.all, sty.frame10)}
                >
                  <div
                    data-plasmic-name={"rectangle1"}
                    data-plasmic-override={overrides.rectangle1}
                    className={classNames(projectcss.all, sty.rectangle1)}
                  />

                  <div
                    data-plasmic-name={"maskGroup"}
                    data-plasmic-override={overrides.maskGroup}
                    className={classNames(projectcss.all, sty.maskGroup)}
                  >
                    <div
                      data-plasmic-name={"rectangle2"}
                      data-plasmic-override={overrides.rectangle2}
                      className={classNames(projectcss.all, sty.rectangle2)}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cLPli
                    )}
                  >
                    {"SwimBot"}
                  </div>
                  <div
                    data-plasmic-name={"button1"}
                    data-plasmic-override={overrides.button1}
                    className={classNames(projectcss.all, sty.button1)}
                  >
                    <AntdButton
                      data-plasmic-name={"button4"}
                      data-plasmic-override={overrides.button4}
                      className={classNames("__wab_instance", sty.button4)}
                      icon={
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__a3AP
                          )}
                        >
                          {"None"}
                        </span>
                      }
                      size={"Large" as const}
                      type={"Solid" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fVqh7
                        )}
                      >
                        {"Button"}
                      </div>
                    </AntdButton>
                  </div>
                </div>
                <div
                  data-plasmic-name={"frame13"}
                  data-plasmic-override={overrides.frame13}
                  className={classNames(projectcss.all, sty.frame13)}
                >
                  <div
                    data-plasmic-name={"rectangle3"}
                    data-plasmic-override={overrides.rectangle3}
                    className={classNames(projectcss.all, sty.rectangle3)}
                  />

                  <div
                    data-plasmic-name={"maskGroup2"}
                    data-plasmic-override={overrides.maskGroup2}
                    className={classNames(projectcss.all, sty.maskGroup2)}
                  >
                    <div
                      data-plasmic-name={"rectangle4"}
                      data-plasmic-override={overrides.rectangle4}
                      className={classNames(projectcss.all, sty.rectangle4)}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hlhjh
                    )}
                  >
                    {"SwimBot"}
                  </div>
                  <div
                    data-plasmic-name={"button22"}
                    data-plasmic-override={overrides.button22}
                    className={classNames(projectcss.all, sty.button22)}
                  >
                    <AntdButton
                      data-plasmic-name={"button5"}
                      data-plasmic-override={overrides.button5}
                      className={classNames("__wab_instance", sty.button5)}
                      icon={
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__foirH
                          )}
                        >
                          {"None"}
                        </span>
                      }
                      size={"Large" as const}
                      type={"Solid" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wusNf
                        )}
                      >
                        {"Button"}
                      </div>
                    </AntdButton>
                  </div>
                </div>
                <div
                  data-plasmic-name={"frame12"}
                  data-plasmic-override={overrides.frame12}
                  className={classNames(projectcss.all, sty.frame12)}
                >
                  <div
                    data-plasmic-name={"rectangle5"}
                    data-plasmic-override={overrides.rectangle5}
                    className={classNames(projectcss.all, sty.rectangle5)}
                  />

                  <div
                    data-plasmic-name={"maskGroup3"}
                    data-plasmic-override={overrides.maskGroup3}
                    className={classNames(projectcss.all, sty.maskGroup3)}
                  >
                    <div
                      data-plasmic-name={"rectangle6"}
                      data-plasmic-override={overrides.rectangle6}
                      className={classNames(projectcss.all, sty.rectangle6)}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aRje3
                    )}
                  >
                    {"SprintBot"}
                  </div>
                  <div
                    data-plasmic-name={"button23"}
                    data-plasmic-override={overrides.button23}
                    className={classNames(projectcss.all, sty.button23)}
                  >
                    <AntdButton
                      data-plasmic-name={"button6"}
                      data-plasmic-override={overrides.button6}
                      className={classNames("__wab_instance", sty.button6)}
                      icon={
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__eqLNp
                          )}
                        >
                          {"None"}
                        </span>
                      }
                      size={"Large" as const}
                      type={"Solid" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__btZh6
                        )}
                      >
                        {"Button"}
                      </div>
                    </AntdButton>
                  </div>
                </div>
                <div
                  data-plasmic-name={"frame11"}
                  data-plasmic-override={overrides.frame11}
                  className={classNames(projectcss.all, sty.frame11)}
                >
                  <div
                    data-plasmic-name={"rectangle7"}
                    data-plasmic-override={overrides.rectangle7}
                    className={classNames(projectcss.all, sty.rectangle7)}
                  />

                  <div
                    data-plasmic-name={"maskGroup4"}
                    data-plasmic-override={overrides.maskGroup4}
                    className={classNames(projectcss.all, sty.maskGroup4)}
                  >
                    <div
                      data-plasmic-name={"rectangle8"}
                      data-plasmic-override={overrides.rectangle8}
                      className={classNames(projectcss.all, sty.rectangle8)}
                    />
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Mcd0
                    )}
                  >
                    {"SwingBot"}
                  </div>
                  <div
                    data-plasmic-name={"button24"}
                    data-plasmic-override={overrides.button24}
                    className={classNames(projectcss.all, sty.button24)}
                  >
                    <AntdButton
                      data-plasmic-name={"button7"}
                      data-plasmic-override={overrides.button7}
                      className={classNames("__wab_instance", sty.button7)}
                      icon={
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span___0TAff
                          )}
                        >
                          {"None"}
                        </span>
                      }
                      size={"Large" as const}
                      type={"Solid" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jYZ0
                        )}
                      >
                        {"Button"}
                      </div>
                    </AntdButton>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"rectangle9"}
              data-plasmic-override={overrides.rectangle9}
              className={classNames(projectcss.all, sty.rectangle9)}
            />

            <Ellipse6Icon
              className={classNames(projectcss.all, sty.svg__pRnhT)}
              role={"img"}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"swingbot"}
              data-plasmic-override={overrides.swingbot}
              hasGap={true}
              className={classNames(projectcss.all, sty.swingbot)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bk3KP
                )}
              >
                {"SwingBot"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"sprintbot"}
              data-plasmic-override={overrides.sprintbot}
              hasGap={true}
              className={classNames(projectcss.all, sty.sprintbot)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jyq79
                )}
              >
                {"SprintBot"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"signbot"}
              data-plasmic-override={overrides.signbot}
              hasGap={true}
              className={classNames(projectcss.all, sty.signbot)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qc5PG
                )}
              >
                {"SignBot"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"swimbot"}
              data-plasmic-override={overrides.swimbot}
              hasGap={true}
              className={classNames(projectcss.all, sty.swimbot)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yd4Qw
                )}
              >
                {"SwimBot"}
              </div>
            </p.Stack>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c3Na3
              )}
            >
              {"Get in touch\nwith us."}
            </div>
            <Arrow1Icon
              className={classNames(projectcss.all, sty.svg__xtGe)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ahyf8
              )}
            >
              {"Your name"}
            </div>
            <Line1Icon
              className={classNames(projectcss.all, sty.svg__r2NWj)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2Jupq
              )}
            >
              {"Your email"}
            </div>
            <Line1Icon
              className={classNames(projectcss.all, sty.svg___9PnIv)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1EePt
              )}
            >
              {"Leave a message"}
            </div>
            <Line1Icon
              className={classNames(projectcss.all, sty.svg__utgeh)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gmsI
              )}
            >
              {"I\u2019m interested in..."}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4M4X
              )}
            >
              {"I am a..."}
            </div>
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame14"}
              data-plasmic-override={overrides.frame14}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame14)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__h0Fs1
                )}
              >
                {"Send"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"coach"}
              data-plasmic-override={overrides.coach}
              hasGap={true}
              className={classNames(projectcss.all, sty.coach)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e9I4W
                )}
              >
                {"Coach"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"athlete"}
              data-plasmic-override={overrides.athlete}
              hasGap={true}
              className={classNames(projectcss.all, sty.athlete)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__il1Ki
                )}
              >
                {"Athlete"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"other"}
              data-plasmic-override={overrides.other}
              hasGap={true}
              className={classNames(projectcss.all, sty.other)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__faBz7
                )}
              >
                {"Other"}
              </div>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "desktopDefault",
    "landing1",
    "frame1",
    "logoTransparentWhite1",
    "button",
    "button2",
    "button3",
    "landing2",
    "carousel",
    "leftArrow",
    "rightArrow",
    "frame10",
    "rectangle1",
    "maskGroup",
    "rectangle2",
    "button1",
    "button4",
    "frame13",
    "rectangle3",
    "maskGroup2",
    "rectangle4",
    "button22",
    "button5",
    "frame12",
    "rectangle5",
    "maskGroup3",
    "rectangle6",
    "button23",
    "button6",
    "frame11",
    "rectangle7",
    "maskGroup4",
    "rectangle8",
    "button24",
    "button7",
    "rectangle9",
    "swingbot",
    "sprintbot",
    "signbot",
    "swimbot",
    "frame14",
    "coach",
    "athlete",
    "other"
  ],
  desktopDefault: [
    "desktopDefault",
    "landing1",
    "frame1",
    "logoTransparentWhite1",
    "button",
    "button2",
    "button3",
    "landing2",
    "carousel",
    "leftArrow",
    "rightArrow",
    "frame10",
    "rectangle1",
    "maskGroup",
    "rectangle2",
    "button1",
    "button4",
    "frame13",
    "rectangle3",
    "maskGroup2",
    "rectangle4",
    "button22",
    "button5",
    "frame12",
    "rectangle5",
    "maskGroup3",
    "rectangle6",
    "button23",
    "button6",
    "frame11",
    "rectangle7",
    "maskGroup4",
    "rectangle8",
    "button24",
    "button7",
    "rectangle9",
    "swingbot",
    "sprintbot",
    "signbot",
    "swimbot",
    "frame14",
    "coach",
    "athlete",
    "other"
  ],
  landing1: [
    "landing1",
    "frame1",
    "logoTransparentWhite1",
    "button",
    "button2",
    "button3"
  ],
  frame1: ["frame1"],
  logoTransparentWhite1: ["logoTransparentWhite1"],
  button: ["button"],
  button2: ["button2"],
  button3: ["button3"],
  landing2: [
    "landing2",
    "carousel",
    "leftArrow",
    "rightArrow",
    "frame10",
    "rectangle1",
    "maskGroup",
    "rectangle2",
    "button1",
    "button4",
    "frame13",
    "rectangle3",
    "maskGroup2",
    "rectangle4",
    "button22",
    "button5",
    "frame12",
    "rectangle5",
    "maskGroup3",
    "rectangle6",
    "button23",
    "button6",
    "frame11",
    "rectangle7",
    "maskGroup4",
    "rectangle8",
    "button24",
    "button7"
  ],
  carousel: [
    "carousel",
    "leftArrow",
    "rightArrow",
    "frame10",
    "rectangle1",
    "maskGroup",
    "rectangle2",
    "button1",
    "button4",
    "frame13",
    "rectangle3",
    "maskGroup2",
    "rectangle4",
    "button22",
    "button5",
    "frame12",
    "rectangle5",
    "maskGroup3",
    "rectangle6",
    "button23",
    "button6",
    "frame11",
    "rectangle7",
    "maskGroup4",
    "rectangle8",
    "button24",
    "button7"
  ],
  leftArrow: ["leftArrow"],
  rightArrow: ["rightArrow"],
  frame10: [
    "frame10",
    "rectangle1",
    "maskGroup",
    "rectangle2",
    "button1",
    "button4"
  ],
  rectangle1: ["rectangle1"],
  maskGroup: ["maskGroup", "rectangle2"],
  rectangle2: ["rectangle2"],
  button1: ["button1", "button4"],
  button4: ["button4"],
  frame13: [
    "frame13",
    "rectangle3",
    "maskGroup2",
    "rectangle4",
    "button22",
    "button5"
  ],
  rectangle3: ["rectangle3"],
  maskGroup2: ["maskGroup2", "rectangle4"],
  rectangle4: ["rectangle4"],
  button22: ["button22", "button5"],
  button5: ["button5"],
  frame12: [
    "frame12",
    "rectangle5",
    "maskGroup3",
    "rectangle6",
    "button23",
    "button6"
  ],
  rectangle5: ["rectangle5"],
  maskGroup3: ["maskGroup3", "rectangle6"],
  rectangle6: ["rectangle6"],
  button23: ["button23", "button6"],
  button6: ["button6"],
  frame11: [
    "frame11",
    "rectangle7",
    "maskGroup4",
    "rectangle8",
    "button24",
    "button7"
  ],
  rectangle7: ["rectangle7"],
  maskGroup4: ["maskGroup4", "rectangle8"],
  rectangle8: ["rectangle8"],
  button24: ["button24", "button7"],
  button7: ["button7"],
  rectangle9: ["rectangle9"],
  swingbot: ["swingbot"],
  sprintbot: ["sprintbot"],
  signbot: ["signbot"],
  swimbot: ["swimbot"],
  frame14: ["frame14"],
  coach: ["coach"],
  athlete: ["athlete"],
  other: ["other"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  desktopDefault: "div";
  landing1: "div";
  frame1: "div";
  logoTransparentWhite1: "div";
  button: typeof AntdButton;
  button2: typeof AntdButton;
  button3: typeof AntdButton;
  landing2: "div";
  carousel: "div";
  leftArrow: "div";
  rightArrow: "div";
  frame10: "div";
  rectangle1: "div";
  maskGroup: "div";
  rectangle2: "div";
  button1: "div";
  button4: typeof AntdButton;
  frame13: "div";
  rectangle3: "div";
  maskGroup2: "div";
  rectangle4: "div";
  button22: "div";
  button5: typeof AntdButton;
  frame12: "div";
  rectangle5: "div";
  maskGroup3: "div";
  rectangle6: "div";
  button23: "div";
  button6: typeof AntdButton;
  frame11: "div";
  rectangle7: "div";
  maskGroup4: "div";
  rectangle8: "div";
  button24: "div";
  button7: typeof AntdButton;
  rectangle9: "div";
  swingbot: "div";
  sprintbot: "div";
  signbot: "div";
  swimbot: "div";
  frame14: "div";
  coach: "div";
  athlete: "div";
  other: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"dKk8Knqcofc5g1t8VsAPKu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "dKk8Knqcofc5g1t8VsAPKu"
    });

    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    desktopDefault: makeNodeComponent("desktopDefault"),
    landing1: makeNodeComponent("landing1"),
    frame1: makeNodeComponent("frame1"),
    logoTransparentWhite1: makeNodeComponent("logoTransparentWhite1"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    button3: makeNodeComponent("button3"),
    landing2: makeNodeComponent("landing2"),
    carousel: makeNodeComponent("carousel"),
    leftArrow: makeNodeComponent("leftArrow"),
    rightArrow: makeNodeComponent("rightArrow"),
    frame10: makeNodeComponent("frame10"),
    rectangle1: makeNodeComponent("rectangle1"),
    maskGroup: makeNodeComponent("maskGroup"),
    rectangle2: makeNodeComponent("rectangle2"),
    button1: makeNodeComponent("button1"),
    button4: makeNodeComponent("button4"),
    frame13: makeNodeComponent("frame13"),
    rectangle3: makeNodeComponent("rectangle3"),
    maskGroup2: makeNodeComponent("maskGroup2"),
    rectangle4: makeNodeComponent("rectangle4"),
    button22: makeNodeComponent("button22"),
    button5: makeNodeComponent("button5"),
    frame12: makeNodeComponent("frame12"),
    rectangle5: makeNodeComponent("rectangle5"),
    maskGroup3: makeNodeComponent("maskGroup3"),
    rectangle6: makeNodeComponent("rectangle6"),
    button23: makeNodeComponent("button23"),
    button6: makeNodeComponent("button6"),
    frame11: makeNodeComponent("frame11"),
    rectangle7: makeNodeComponent("rectangle7"),
    maskGroup4: makeNodeComponent("maskGroup4"),
    rectangle8: makeNodeComponent("rectangle8"),
    button24: makeNodeComponent("button24"),
    button7: makeNodeComponent("button7"),
    rectangle9: makeNodeComponent("rectangle9"),
    swingbot: makeNodeComponent("swingbot"),
    sprintbot: makeNodeComponent("sprintbot"),
    signbot: makeNodeComponent("signbot"),
    swimbot: makeNodeComponent("swimbot"),
    frame14: makeNodeComponent("frame14"),
    coach: makeNodeComponent("coach"),
    athlete: makeNodeComponent("athlete"),
    other: makeNodeComponent("other"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
